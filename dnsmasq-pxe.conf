# Listen on this specific port instead of the standard DNS port
# (53). Setting this to zero completely disables DNS function,
# leaving only DHCP and/or TFTP.
port=0

# If you want dnsmasq to listen for DHCP and DNS requests only on
# specified interfaces (and the loopback) give the name of the
# interface (eg eth0) here.
# Repeat the line for more than one interface.
#interface=
# Or you can specify which interface _not_ to listen on
except-interface=lo
# Or which to listen on by address (remember to include 127.0.0.1 if
# you use this.)
#listen-address=
# If you want dnsmasq to provide only DNS service on an interface,
# configure it as shown above, and then use the following line to
# disable DHCP and TFTP on it.
#no-dhcp-interface=

# ----------------------------------------------------------------------------
# TFTP
# ----------------------------------------------------------------------------

# Runas
user=nobody
group=nobody

# Enable dnsmasq's built-in TFTP server
enable-tftp

# Set the root directory for files available via FTP.
tftp-root=/srv/tftp

# Make the TFTP server more secure: with this set, only files owned by
# the user dnsmasq is running as will be send over the net.
# (Docker host does not know local service uid)
#tftp-secure

# This option stops dnsmasq from negotiating a larger blocksize for TFTP
# transfers. It will slow things down, but may rescue some broken TFTP
# clients.
#tftp-no-blocksize

# ----------------------------------------------------------------------------
# PXE Boot - General
# ----------------------------------------------------------------------------
# The same as above, but use custom tftp-server instead machine running dnsmasq
# (provided through docker startup)
#dhcp-boot=pxelinux,server.name,192.168.1.100

# DHCP-Option 60 (Vendor=PXEClient)
# (https://support.ca.com/us/knowledge-base-articles.TEC381737.html)
# + Vendor specific sub-options (DHCP-Option 43)
#   Suboption 6: PXE discovery control = 2
dhcp-option-force=vendor:PXEClient,6,2b
#dhcp-no-override

# ----------------------------------------------------------------------------
# PXE Boot - Tags
# ----------------------------------------------------------------------------

dhcp-match=set:ipxe,175 # iPXE sends a 175 option.
#dhcp-userclass=set:uipxe,iPXE
dhcp-userclass=set:uipxe,AKiPXE
tag-if=set:stage1,tag:ipxe,tag:uipxe

dhcp-vendorclass=set:bios,PXEClient:Arch:00000
dhcp-vendorclass=set:efi32,PXEClient:Arch:00002
dhcp-vendorclass=set:efi32,PXEClient:Arch:00006
dhcp-vendorclass=set:efi64,PXEClient:Arch:00007
dhcp-vendorclass=set:efi64,PXEClient:Arch:00008
dhcp-vendorclass=set:efi64,PXEClient:Arch:00009

tag-if=set:loadbios,tag:!ipxe,tag:bios
tag-if=set:loadefi32,tag:!ipxe,tag:efi32
tag-if=set:loadefi64,tag:!ipxe,tag:efi64

# ----------------------------------------------------------------------------
#                        ___      
# PXE Boot - Menu       (o o)     
#                   ooO--(_)--Ooo-
# ----------------------------------------------------------------------------
# Bootmenu to be delivered on first DHCP request to offer iPXE.
pxe-prompt=tag:!stage1,"      ___\r\n     (o o)         Boot Menu >> [F8] <<\r\n ooO--(_)--Ooo-\n\r       ", 5

# Step 1: deliver architecture specific iPXE
# known named client system types: x86PC, PC98, IA64_EFI, Alpha, Arc_x86,
#                                  Intel_Lean_Client, IA32_EFI, X86-64_EFI,
#                                  Xscale_EFI, BC_EFI, ARM32_EFI, ARM64_EFI

# default option first
pxe-service=tag:!stage1,X86-64_EFI,"Continue local boot",0
pxe-service=tag:!stage1,IA64_EFI,"Continue local boot",0
pxe-service=tag:!stage1,x86PC,"Continue local boot",0

pxe-service=tag:loadbios,x86PC,"iPXE Network boot (BIOS)",undionly.kpxe
pxe-service=tag:loadefi32,IA32_EFI,"iPXE Network boot (IA-EFI32)",ipxe32.efi
pxe-service=tag:loadefi32,BC_EFI,"iPXE Network boot (BC-EFI32)",ipxe32.efi
pxe-service=tag:loadefi64,X86-64_EFI,"iPXE Network boot (x64-EFI)",ipxe.efi
pxe-service=tag:loadefi64,IA64_EFI,"iPXE Network boot (IA64-EFI)",ipxe.efi

dhcp-boot=tag:!ipxe,undionly.ipxe

# Step 2: Serve iPXE menu
# Fallback (should never be reached since iPXE init points directly too boot.ipxe)
pxe-prompt=tag:stage1,"... stand by ...",1
pxe-service=tag:stage1,X86-64_EFI,"Continue",boot.ipxe
pxe-service=tag:stage1,IA64_EFI,"Continue",boot.ipxe
pxe-service=tag:stage1,x86PC,"Continue",boot.ipxe
# the last line alone should work, but somehow requires a full path (while the menu doesn't)
dhcp-boot=tag:stage1,boot.ipxe

