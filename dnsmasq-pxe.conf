# Listen on this specific port instead of the standard DNS port
# (53). Setting this to zero completely disables DNS function,
# leaving only DHCP and/or TFTP.
port=0

# If you want dnsmasq to listen for DHCP and DNS requests only on
# specified interfaces (and the loopback) give the name of the
# interface (eg eth0) here.
# Repeat the line for more than one interface.
#interface=
# Or you can specify which interface _not_ to listen on
except-interface=lo
# Or which to listen on by address (remember to include 127.0.0.1 if
# you use this.)
#listen-address=
# If you want dnsmasq to provide only DNS service on an interface,
# configure it as shown above, and then use the following line to
# disable DHCP and TFTP on it.
#no-dhcp-interface=

user=nobody
group=nobody

# Enable dnsmasq's built-in TFTP server
enable-tftp

# Set the root directory for files available via FTP.
tftp-root=/srv/tftp

# Make the TFTP server more secure: with this set, only files owned by
# the user dnsmasq is running as will be send over the net.
#tftp-secure

# This option stops dnsmasq from negotiating a larger blocksize for TFTP
# transfers. It will slow things down, but may rescue some broken TFTP
# clients.
#tftp-no-blocksize

# Set the boot filename for netboot/PXE. You will only need
# this is you want to boot machines over the network and you will need
# a TFTP server; either dnsmasq's built in TFTP server or an
# external one. (See below for how to enable the TFTP server.)
#dhcp-boot=pxelinux.0

# The same as above, but use custom tftp-server instead machine running dnsmasq
#dhcp-boot=pxelinux,server.name,192.168.1.100

dhcp-match=set:ipxe,175 # iPXE sends a 175 option.

# iPXE chainloaded client, natives iPXE -> ipxe & !chainload
dhcp-userclass=set:uipxe,iPXE
dhcp-vendorclass=set:vuipxe,PXEClient
tag-if=set:chainload,tag:uipxe,tag:vuipxe
tag-if=set:nativeipxe,tag:ipxe,tag:!chainload

# load undionly.kpxe for clients not tagged with 'ipxe'.
dhcp-boot=tag:!ipxe,undionly.kpxe.0

# undionly.kpxe issues a second DHCP request and we then serve bootstrap.ipxe over http
# using Robin Smidsrød's bootstrap method provided at https://gist.github.com/2234639
dhcp-boot=tag:chainload,boot.ipxe

dhcp-option=vendor:PXEClient,6,2b
dhcp-no-override

# Bootmenü soll nur beim ersten Einstieg (egal ob mit PXE oder iPXE) geliefert werden
pxe-prompt=tag:!chainload,">>> [F8] PXE Bootmenue <<<", 5
pxe-service=tag:!ipxe,X86PC, "Boot from network", undionly.kpxe
pxe-service=tag:ipxe,X86PC, "Boot from network", boot.ipxe
pxe-service=tag:!chainload,X86PC, "Boot from local hard disk", 0

